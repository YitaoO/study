/* ============================================================
    此JS用于总结"强制类型转化"的一些概念和代码解释（*代表重要的程度）
============================================================ */
//1:强制类型转化总是返回标量的基本类型（字符串，数字，布尔值），而不会返回对象和函数
//2:类型转换发生在静态语言类型的编译阶段；而强制类型转化发生在动态语言类型的运行时（runtime）;而js就是统称为强制类型转换
//3：隐性强制类型转换：var a=42;var b=a+""
//4:显性强制类型转换:var a =42;var b=String(a)
//5:ToString:处理非字符串到字符串
var a=[1,2,3]
a.toString(a) //输出"1,2,3" 数字的默认toString()重新定义，讲所有单元字符串化后再用 逗号隔开

//6:JSON.stringify():将JSON对象序列化为字符串
//7：JSON.stringify()在遇到了不安全的JSON值（如underfined,null,function,symbol和包含循环引用）时都会自动把其忽略在数组中会返回null
//8:JSON.stringify()可以传递一个可选参数(replacer),它可以是数组或者函数，表示对象序列化过程中那些属性要被处理，没有被选择的属性就会被排除;replacer也可以是一个函数，它本身会对对象调用一次，然后对对象中的每个属性各调用一次，每次调用传递两个参数，键和值
var a={
  b:42,
  c:"42",
  d:[1,2,3]
}
var info=JSON.stringify(a,["b","c"])  //{"b":42,"c":"42"}
JSON.stringify(a,function(k,v){
  if(k!="c") return v
}) //{"b":42,"d":[1,2,3]}

//9:ToNumber():将一些非数字值当做数字来使用(true:1;false:0;underfined:NaN;null:0);ToBoolean
//10:字符串和数字之间的显性转化:显性转化：String();Number()隐性转化:a.toString()
//11:一元运算符+有一个重要的功能：就是将日期（Date）对象强制转化为数字类型，也就是时间戳,所以呀通常用这个方法返回当前时间戳:var timeStamp=+new Date(),也可以用这种方法:var timeStamp=new Date().getTime()
var d=new Date();+d
//12:es5新增的转为时间戳方法:var timeStamp=Date.now()
//13:不推荐使用强制类型转化把日期转为时间戳，应该使用:Date.now();new Date().getTime()
//14:~x(等同于-> -(x+1));~和index0f()一起使用可以将结果强制类型转化为真/假值;
//15:indexOf():检查是否包含子字符串，如果返回-1，就是没有找到（一般用<0，不用==-1）
var a="Hello world"
if(a.indexOf("lo") >= 0 && a.indexOf("lo") !=-1){ //这种写法不是很好，暴露了细节，这里指-1作为失败时的返回值，这些细节应该被屏蔽
  console.info("我找到匹配了") //a.indexOf("lo")==3
}
if(a.indexOf("ol") >= 0 && a.indexOf("ol") !=-1){
  console.info("我找不到匹配")
}

var a="Hello world"
console.info(~a.indexOf("lo")) //-4
if(~a.indexOf("lo")){ //这种写法比较好，一般用这种方法，就没有暴露细节（***）
  console.info("我找到匹配了")
}
console.info(~a.indexOf("ol")) //假值0;a.indexOf("ol")==-1
if(!~a.indexOf("lo")){
  console.info("我找不到匹配")
}
//15:如果indexOf(..)返回为-1;-1将其转化为假值0，其她情况一律为真值(***);~比>=0和==-1更简洁
//16:解析字符串(parseInt())和强制转化(Number())是有区别的;解析字符串允许有非数字字符，而转化不允许出现非数字字符
var a="42"
var b="42px"
Number(a) //42
Number(b) //NuN
parseInt(a) //42
parseInt(b) //42
//16:在es5以前，parseInt()需要传入一个参数，说明指定转化的基数，如（parseInt(a,10)->十进制）,不然会根据字符串的第一个字符来自行决定基数，这是一个bug，可是ees5后默认第二个参数的基准是10
//17:Boolean()是显性转换;一元运算符！显式的强制转化为布尔值，同时并且将值取反；所以最常用的强制转化为布尔值的是用!!(取反取反->变为真)
//18：如果再if()语句中，如果没有使用Boolean()或者!!,就会隐性的进行ToBoolean()转化为布尔值，建议使用Boolean()和!!，方便代码阅读（***）
//19:条件语句，for语句,while语句 ,?:语句,逻辑运算符语句|| && ..以上情况都是隐式的强制类型转换为布尔值
//20:注意逻辑运算符 || && 和其他语言的不同； js中逻辑运算符返回的是两个操作符中的一个,它们的返回不是布尔值（重点理解这句话***）
//21：|| 如果返回为true就返回第一个操作符的值,&&就相反
//22:==（之前的理解是检测值是否相等）;===(之前的理解是检测值和类型是否相等),这种理解是错误的，应该理解为==:允许在相等比较中进行强制类型转换,而不允许强制转化；==和===都会检测操作数的类型，区别在于操作数类型不同时处理的方式不同而已
//23:使用条件语句的时候，不要用a==true或者a===true，要使用if(a)或者if(!!a)或者if(Boolean(a))(后面两种方法更好)
//24：注意，不要用一个布尔值去判断一个数字类型或者字符串类型，比如:"aaa" == true;111 ==true，这种方式是错误的（***）,==或者===一般是数字类型和字符串类型之间的比较
