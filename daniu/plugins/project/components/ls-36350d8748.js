/*! ls v0.0.8 ~ (c) 2012-2016 pzhang@waytec.cn ~ http://gitsrv01.ewaytec.cn/frontend-components-team/ls.git */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ls"] = factory();
	else
		root["ls"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "components/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _phonetic = __webpack_require__(1);

	var _phonetic2 = _interopRequireDefault(_phonetic);

	var _utils = __webpack_require__(2);

	var _utils2 = _interopRequireDefault(_utils);

	__webpack_require__(3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ls = {
	    // 获取
	    get: function get(key) {
	        var value = localStorage.getItem(key);
	        return value ? JSON.parse(value) : null;
	    },
	    // 删除
	    remove: function remove(key) {
	        localStorage.removeItem(key);
	    },
	    // 清空
	    clear: function clear() {
	        localStorage.clear();
	    },
	    // 是否存在
	    has: function has(key) {
	        return this.get(key) !== null;
	    },
	    // 清空除用户信息外的数据 key = config.userKey
	    clearBase: function clearBase(callback) {
	        for (var i = localStorage.length - 1; i >= 0; i--) {
	            if (localStorage.key(i) !== config.userKey && localStorage.key(i) !== config.clearKey) {
	                localStorage.removeItem(localStorage.key(i));
	            }
	            if (i == 0 && typeof callback == "function") {
	                callback();
	            }
	        }
	    },
	    // 清空选择用户的除信息外缓存 user.id
	    clearMembers: function clearMember(members, callback) {
	        if (members) {
	            if (this.has(config.clearKey) && this.get(config.clearKey) == members) {
	                return;
	            } else {
	                this.set(config.clearKey, members);
	            }

	            if (members == "all") {
	                this.clearBase(callback);
	            } else {
	                var memberArray = members.replace(/\s+/g, "").split(',');
	                for (var i = memberArray.length - 1; i >= 0; i--) {
	                    if (memberArray[i] == user.id) {
	                        this.clearBase(callback);
	                    }
	                }
	            }
	        }
	    },
	    // 保存
	    set: function set(key, value) {
	        try {
	            localStorage.setItem(key, JSON.stringify(value));
	        } catch (e) {
	            if (e.code == 22) {
	                this.clear();
	                this.set(key, value);
	            }
	        }
	    },
	    // 根据版本号清理localStorage
	    clearData: function clearData(options) {
	        var v = ls.get(options.vKey);
	        if (v != options.vNum) {
	            ls.set(options.vKey, options.vNum);
	            for (var i = 0; i < options.keys.length; i++) {
	                ls.remove(options.keys[i]);
	            }
	        }
	    },
	    /**
	     * 保存或修改指定Key的本地存储对象
	     * @params
	     *  key         localStorage指定的KEY
	     *  idkey       存储对象唯一标识字段名称例如:id
	     *  list        新的对象数组例如:[{id:1,name:zche},{id:2,name:mingming}]
	     */
	    save: function save(key, idkey, list, callback) {
	        if (!ls.has(key)) {
	            ls.set(key, list);
	            callback(true, list);
	            return;
	        }

	        var olist = ls.get(key);

	        olist = olist.concat(list);
	        var flist = olist.distinct(idkey);

	        if (typeof callback == 'function') {
	            ls.set(key, flist);
	            callback(true, flist);
	        }
	    },
	    /**
	     * 局部保存或修改指定Key的本地存储对象列表的项目
	     * @params
	     *  key         localStorage指定的KEY
	     *  idkey       存储对象唯一标识字段名称例如:id
	     *  list        新的对象数组例如:[{id:1,name:zche},{id:2,name:mingming}]
	     */
	    partsave: function partsave(key, idkey, list, callback) {
	        if (!ls.has(key)) {
	            callback(ls, list);
	            return;
	        }

	        var olist = ls.get(key);
	        for (var i = 0; i < olist.length; i++) {
	            for (var j = 0; j < list.length; j++) {
	                if (olist[i][idkey] == list[j][idkey]) {
	                    for (var prop in list[j]) {
	                        olist[i][prop] = list[j][prop];
	                    }
	                }
	            }
	        }

	        if (typeof callback == 'function') {
	            console.log('保存成功!对象:' + key);
	            ls.set(key, olist);
	            callback(true, olist);
	        }
	    },
	    /**
	     * 局部删除指定Key的本地存储对象列表的项目
	     * @params
	     *  key         localStorage指定的KEY
	     *  idkey       存储对象唯一标识字段名称例如:id
	     *  list        被删对象数组例如:[{id:1},{id:2}]
	     */
	    partdelte: function partdelte(key, idkey, list, callback) {
	        if (!ls.has(key)) {
	            callback(ls, list);
	            return;
	        }
	        var olist = ls.get(key);
	        var nlist = [];
	        for (var i = 0; i < olist.length; i++) {
	            for (var j = 0; j < list.length; j++) {
	                if (olist[i][idkey] !== list[j][idkey]) {
	                    nlist.push(olist[i]);
	                }
	            }
	        }

	        if (typeof callback == 'function') {
	            console.log('保存成功!对象:' + key);
	            ls.set(key, nlist);
	            callback(true, nlist);
	        }
	    },
	    /**
	     * 删除指定Key的本地存储对象
	     * @key         localStorage指定的KEY
	     * @obj         示例对象例如:{id:1,name:zche},从列表删除id为i,姓名为zche的对象
	     */
	    del: function del(key, obj, callback) {
	        try {
	            var list = ls.get(key);
	            var nlist = [];
	            for (var i = 0; i < list.length; i++) {
	                var item = list[i];
	                var isSame = true;
	                for (var skey in obj) {
	                    if (item[skey] != obj[skey]) {
	                        isSame = false;
	                        break;
	                    }
	                }
	                if (isSame) {
	                    nlist.push(item);
	                }
	            }
	            ls.set(key, nlist);
	            if (typeof callback == "function") {
	                console.log("删除成功!对象:" + key);
	                callback(true, nlist);
	            }
	        } catch (e) {
	            if (typeof callback == "function") {
	                console.log("删除失败!对象:" + key);
	                callback(false, e);
	            }
	        }
	    },
	    /**
	     * 条件筛选
	     * @where       查询条件
	     * @flist
	     */
	    andFind: function andFind(where, flist) {
	        // 过滤
	        var _sP = where.split('&');
	        for (var i = 0; i < _sP.length; i++) {
	            var stringW = _sP[i]; // 条件字符串 例如：'Status=1'
	            //转义条件中含有“<||>”字符
	            stringW = stringW.replace(/@l@/g, "&#60;").replace(/@r@/g, "&#62;");
	            var re = new RegExp("=|<|>|>=|<=|!=|like");
	            var w = stringW.match(re)[0]; // 例如：=
	            var aW = stringW.split(w); // 条件数组 例如：Status,1
	            var aWkey = aW[0].trim(); // 条件字段 例如：Status
	            var aWval = (0, _utils2.default)(aW[1].trim()); // 条件值 例如：1
	            switch (w) {
	                case "=":
	                    flist = $.grep(flist, function (a) {
	                        return (0, _utils2.default)(a[aWkey]) == aWval;
	                    });
	                    break;
	                case ">":
	                    flist = $.grep(flist, function (a) {
	                        return (0, _utils2.default)(a[aWkey]) > aWval;
	                    });
	                    break;
	                case "<":
	                    flist = $.grep(flist, function (a) {
	                        return (0, _utils2.default)(a[aWkey]) < aWval;
	                    });
	                    break;
	                case ">=":
	                    flist = $.grep(flist, function (a) {
	                        return (0, _utils2.default)(a[aWkey]) >= aWval;
	                    });
	                    break;
	                case "<=":
	                    flist = $.grep(flist, function (a) {
	                        return (0, _utils2.default)(a[aWkey]) <= aWval;
	                    });
	                    break;
	                case "!=":
	                    flist = $.grep(flist, function (a) {
	                        return (0, _utils2.default)(a[aWkey]) != aWval;
	                    });
	                    break;
	                case "like":
	                    flist = $.grep(flist, function (a) {
	                        var t = (0, _utils2.default)(a[aWkey]);

	                        if (!t) {
	                            return false;
	                        }

	                        if (typeof t == 'number') {
	                            t += '';
	                        }
	                        return t.indexOf(aWval) >= 0;
	                    });
	                    break;
	            }
	        }
	        return flist;
	    },
	    /**
	     * 分页查询
	     * @key         localStorage指定的KEY
	     * @where       查询条件例如:name=zche || id<100 || name=zche & id<100
	     * @orders      排序字段: @orders = 'Role ModifyTime'
	     * @sorts       排序例如: @sorts = 'DESC ASC'
	     * @pageIndex   页码
	     * @pageSize    页大小
	     * @callback
	    */
	    select: function select(key, where, orders, sorts, pageIndex, pageSize, callback) {
	        var olist = ls.get(key);
	        var flist = olist; // 过滤后的列表
	        var whereTemp;

	        // 筛选
	        if (where) {
	            // where支持动态生成
	            if (typeof where == 'function') {
	                whereTemp = where();
	            } else {
	                whereTemp = where;
	            }

	            var w = whereTemp.split('||');
	            var tem = [];
	            for (var i = 0; i < w.length; i++) {
	                var temA = ls.andFind(w[i], olist);
	                if (temA.length > 0) {
	                    tem = tem.concat(temA);
	                }
	            }

	            flist = tem.distinct();
	        }

	        // 排序，区分单个排序与多重排序
	        if (orders && sorts) {
	            var orderItems = [],
	                sortFlags = [];

	            orderItems = orders.split(' ');
	            sortFlags = sorts.split(' ');

	            if (orderItems.length == 1) {
	                if (sortFlags[0].toUpperCase() == 'ASC') {
	                    flist.OrderByAsc(function (a) {
	                        return a[orderItems[0]];
	                    });
	                } else {
	                    flist.OrderByDesc(function (a) {
	                        return a[orderItems[0]];
	                    });
	                }
	            } else {
	                flist.MultiOrderBy(orders, sorts, function (a, order) {
	                    return a[order];
	                });
	            }
	        }

	        // 分页
	        if (flist && flist.length > 0) {
	            var totalCount, pageCount;
	            totalCount = flist.length;
	            pageCount = Math.ceil(totalCount / pageSize);
	            flist = flist.slice((pageIndex - 1) * pageSize, (pageIndex - 1) * pageSize + pageSize);
	            var data = { "PageIndex": pageIndex, "PageSize": pageSize, "TotalCount": totalCount, "PageCount": pageCount, list: flist };
	            if (typeof callback == "function") {
	                callback(true, data);
	            }
	        } else {
	            if (typeof callback == "function") {
	                callback(false, { "PageIndex": pageIndex, "PageSize": pageSize, "TotalCount": 0, "PageCount": 0, list: [] });
	            }
	        }
	    },
	    /**
	     * 分页查询
	     * @key         localStorage指定的KEY
	     * @where       查询条件例如:name=zche || id<100 || name=zche & id<100
	     * @orders      排序字段: @orders = 'Role ModifyTime'
	     * @sorts       排序例如: @sorts = 'DESC ASC'
	     * @skip        跳过skip数量不需要排序
	     * @pageIndex   页码
	     * @pageSize    页大小
	     * @callback
	    */
	    skipSelect: function skipSelect(key, where, orders, sorts, pageIndex, pageSize, skip, callback) {
	        var olist = ls.get(key);
	        var flist = null;
	        var frontList;
	        var endList;
	        if (skip > 0) {
	            frontList = olist.slice(0, skip); // 不需要筛选排序的部分
	            endList = olist.slice(skip); // 需要筛选排序的部分

	            flist = endList; // 过滤后的列表
	        } else {
	            flist = olist;
	        }

	        var whereTemp;
	        var w;
	        var tem;

	        // 筛选
	        if (where) {

	            // where支持动态生成
	            if (typeof where == 'function') {
	                whereTemp = where();
	            } else {
	                whereTemp = where;
	            }

	            w = whereTemp.split('||');
	            tem = [];
	            for (var i = 0; i < w.length; i++) {
	                var temA = ls.andFind(w[i], flist);
	                if (temA.length > 0) {
	                    tem = tem.concat(temA);
	                }
	            }

	            flist = tem.distinct();
	        }

	        // 排序，区分单个排序与多重排序
	        if (orders && sorts) {
	            var orderItems = [],
	                sortFlags = [];

	            orderItems = orders.split(' ');
	            sortFlags = sorts.split(' ');

	            if (orderItems.length == 1) {
	                if (sortFlags[0].toUpperCase() == 'ASC') {
	                    flist.OrderByAsc(function (a) {
	                        return a[orderItems[0]];
	                    });
	                } else {
	                    flist.OrderByDesc(function (a) {
	                        return a[orderItems[0]];
	                    });
	                }
	            } else {
	                flist.MultiOrderBy(orders, sorts, function (a, order) {
	                    return a[order];
	                });
	            }
	        }

	        if (skip > 0) {
	            // 筛选
	            if (where) {
	                // where支持动态生成
	                if (typeof where == 'function') {
	                    whereTemp = where();
	                } else {
	                    whereTemp = where;
	                }

	                w = whereTemp.split('||');
	                tem = [];
	                for (var _i = 0; _i < w.length; _i++) {
	                    var _temA = ls.andFind(w[_i], frontList);
	                    if (_temA.length > 0) {
	                        tem = tem.concat(_temA);
	                    }
	                }

	                frontList = tem.distinct();
	            }

	            flist = frontList.concat(flist);
	        }

	        // 分页
	        if (flist && flist.length > 0) {
	            var totalCount, pageCount;
	            totalCount = flist.length;
	            pageCount = Math.ceil(totalCount / pageSize);
	            flist = flist.slice((pageIndex - 1) * pageSize, (pageIndex - 1) * pageSize + pageSize);
	            var data = { "PageIndex": pageIndex, "PageSize": pageSize, "TotalCount": totalCount, "PageCount": pageCount, list: flist };
	            if (typeof callback == "function") {
	                callback(true, data);
	            }
	        } else {
	            if (typeof callback == "function") {
	                callback(false, { "PageIndex": pageIndex, "PageSize": pageSize, "TotalCount": 0, "PageCount": 0, list: [] });
	            }
	        }
	    },
	    /**
	     * 从列表获取详细信息
	     * @key         localStorage指定的KEY
	     * @where       查询条件例如:id=123
	     */
	    getFirst: function getFirst(key, where, callback) {
	        try {
	            var olist = ls.get(key);
	            var flist = olist; //过滤后的列表

	            //筛选
	            if (where) {
	                var w = where.split('||');
	                var tem = [];
	                for (var i = 0; i < w.length; i++) {
	                    var temA = ls.andFind(w[i], olist);
	                    if (temA.length > 0) {
	                        tem = tem.concat(temA);
	                    }
	                }
	                flist = tem.distinct();
	            }

	            if (typeof callback == "function") {
	                console.log("查询本地数据成功!对象:" + key);
	                callback(true, flist[0] ? flist[0] : null);
	            }
	        } catch (e) {
	            if (typeof callback == "function") {
	                console.log("查询本地数据失败!对象:" + key);
	                callback(false, e);
	            }
	        }
	    },
	    /**
	     * 获取列表最大的时间戳
	     * @key:localStorage指定的KEY
	     */
	    getMaxStamp: function getMaxStamp(key, column) {
	        var list = ls.get(key);
	        column = column ? column : "updateTime";
	        if (list && list.length > 0) {
	            list.OrderByDesc(function (a) {
	                return a[column];
	            });
	            return list[0][column] + 1;
	        }
	        return Math.round(new Date().getTime() / 1000);
	    },
	    /**
	     * 获取列表最小的时间戳
	     * @key         localStorage指定的KEY
	     */
	    getMinStamp: function getMinStamp(key, column) {
	        var list = ls.get(key);
	        column = column ? column : "updateTime";
	        if (list && list.length > 0) {
	            list.OrderByAsc(function (a) {
	                return a[column];
	            });
	            return list[0][column] - 1;
	        }
	        return Math.round(new Date().getTime() / 1000);
	    }
	};

	exports.default = ls;
	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * 处理汉字排序
	 * 规则：取汉字拼音首字母进行比较排序
	 * 返回结果：“我是汉字排序” --> “WSHZPX”
	 */
	var Pinyin = function () {
	    // strChineseFirstPY的内容是指在中文编码范围内（中文范围 4E00-9FBF（19968~40895）），每个汉字的拼音首字母的连接而成的一个字符串。
	    var strChineseFirstPY = "";

	    // 获取汉字拼音首字母
	    var getFirstLetter = function getFirstLetter(str) {
	        if (typeof str != "string") {
	            throw new Error(-1, "函数makePy需要字符串类型参数!");
	        }

	        var arrResult = [];
	        for (var i = 0, len = str.length; i < len; i++) {
	            var ch = str.charAt(i);

	            //检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理
	            arrResult.push(checkCh(ch));
	        }
	        return arrResult.join("");
	    };
	    var checkCh = function checkCh(ch) {
	        var uni = ch.charCodeAt(0);

	        //如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数
	        if (uni > 40869 || uni < 19968) {
	            return ch; //dealWithOthers(ch);
	        }
	        return strChineseFirstPY.charAt(uni - 19968);
	    };

	    return {
	        getFirstLetter: getFirstLetter
	    };
	}();

	exports.default = Pinyin;
	module.exports = exports["default"];

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	// 将字符串转换成相应的类型
	function stringToDate(str) {
	    if (/Date*/.test(str)) {
	        var m = /-?\d+/.exec(str);
	        return new Date(parseInt(m[0])).getTime();
	    }

	    return str;
	}

	exports.default = stringToDate;
	module.exports = exports["default"];

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _phonetic = __webpack_require__(1);

	var _phonetic2 = _interopRequireDefault(_phonetic);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//idkey 用于判断是否为相等的属性
	Array.prototype.distinct = function (idkey) {
	    var arr = [],
	        len = this.length;

	    if (idkey) {
	        for (var i = 0; i < len; i++) {
	            for (var j = i + 1; j < len; j++) {
	                if (this[i][idkey] === this[j][idkey]) {
	                    j = ++i;
	                }
	            }
	            arr.push(this[i]);
	        }
	        return arr;
	    } else {
	        for (var _i = 0; _i < len; _i++) {
	            for (var _j = _i + 1; _j < len; _j++) {
	                if (this[_i] === this[_j]) {
	                    _j = ++_i;
	                }
	            }
	            arr.push(this[_i]);
	        }
	        return arr;
	    }
	};

	// 扩展数组顺序排列函数
	Array.prototype.OrderByAsc = function (func) {
	    var m = {};
	    for (var i = 0; i < this.length; i++) {
	        for (var k = 0; k < this.length; k++) {
	            if (func(this[i]) < func(this[k])) {
	                m = this[k];
	                this[k] = this[i];
	                this[i] = m;
	            }
	        }
	    }
	    return this;
	};

	// 扩展数组倒序排列函数
	Array.prototype.OrderByDesc = function (func) {
	    var m = {};
	    for (var i = 0; i < this.length; i++) {
	        for (var k = 0; k < this.length; k++) {
	            if (func(this[i]) > func(this[k])) {
	                m = this[k];
	                this[k] = this[i];
	                this[i] = m;
	            }
	        }
	    }
	    return this;
	};

	/**
	 * 拓展数组排序函数，支持多个orderby字段
	 * @orders = 'Role ModifyTime'
	 * @sorts = 'DESC ASC'
	 * @func = function (item, order) { return item[order]; }
	 */
	Array.prototype.MultiOrderBy = function (orders, sorts, func) {
	    // 组装orderItems数组和sortFlags数组
	    var orderItems = [],
	        // 格式如：['Role', 'ModifyTime']
	    sortFlags = []; // 格式如：['DESC', 'ASC']
	    var m = {};
	    orderItems = orders.split(' ');
	    sortFlags = sorts.split(' ');

	    // 比较权重
	    for (var i = this.length - 1; i > 0; i--) {
	        for (var k = 0; k < i; k++) {
	            // 遍历排序字段
	            for (var i_orderItem = 0; i_orderItem < orderItems.length; i_orderItem++) {
	                var current_order = orderItems[i_orderItem],
	                    current_flag = sortFlags[i_orderItem],
	                    ka = func(this[k], current_order),
	                    kb = func(this[k + 1], current_order);

	                // 当前项为string时，执行汉字转拼音（仅当字符为汉字才进行转换，其他直接返回）
	                if (typeof ka == "string" && typeof kb == "string") {
	                    ka = _phonetic2.default.getFirstLetter(ka);
	                    kb = _phonetic2.default.getFirstLetter(kb);
	                }

	                if (current_flag == "DESC") {
	                    if (ka < kb) {
	                        // 得出结果后，退出循环，不再遍历后续排序字段
	                        m = this[k];
	                        this[k] = this[k + 1];
	                        this[k + 1] = m;
	                        break;
	                    } else if (ka > kb) {
	                        // 当且仅当，当前排序字段的权重相等时，才继续遍历后续排序字段
	                        break;
	                    }
	                } else if (current_flag == "ASC") {
	                    if (ka > kb) {
	                        m = this[k];
	                        this[k] = this[k + 1];
	                        this[k + 1] = m;
	                        break;
	                    } else if (ka < kb) {
	                        break;
	                    }
	                }
	            }
	        }
	    }
	    return this;
	};

	// 数组位置判断
	Array.prototype.IndexOf = function (idkey, val) {
	    for (var i = 0; i < this.length; i++) {
	        if (this[i][idkey] == val[idkey]) return i;
	    }
	    return -1;
	};

/***/ }
/******/ ])
});
;